export type TbsIndex =
  | '0'
  | '1'
  | '2'
  | '3'
  | '4'
  | '5'
  | '6'
  | '7'
  | '8'
  | '9'
  | '10'
  | '11'
  | '12'
  | '13'
  | '14'
  | '15'
  | '16'
  | '17'
  | '18'
  | '19'
  | '20'
  | '21'
  | '22'
  | '23'
  | '24'
  | '25'
  | '26'
  | '26A'
  | '27'
  | '28'
  | '29'
  | '30'
  | '31'
  | '32'
  | '32A'
  | '33'
  | '33A'
  | '33B'
  | '34'
  | '34A'
  | '35'
  | '36'
  | '37A'
  | '37';

export namespace lteTbsTable {
  const tbsTable = {
    // index = TBS index, pos in array rbs: 1, 6, 12, 15, 18, 24, 25, 30, 45, 50, 60, 75, 100, 150, 200, 225, 300, 400
    '0': [
      16, 152, 328, 392, 488, 648, 680, 808, 1256, 1384, 1672, 2088, 2792, 4136,
      5544, 6200, 8248, 11064,
    ],
    '1': [
      24, 208, 424, 520, 632, 872, 904, 1064, 1608, 1800, 2152, 2728, 3624,
      5544, 7224, 8248, 10680, 14688,
    ],
    '2': [
      32, 256, 520, 648, 776, 1064, 1096, 1320, 2024, 2216, 2664, 3368, 4584,
      6712, 9144, 9912, 13536, 18336,
    ],
    '3': [
      40, 328, 680, 872, 1032, 1384, 1416, 1736, 2600, 2856, 3496, 4392, 5736,
      8760, 11448, 12960, 16992, 22920,
    ],
    '4': [
      56, 408, 840, 1064, 1288, 1736, 1800, 2152, 3240, 3624, 4264, 5352, 7224,
      10680, 14688, 15840, 21384, 29296,
    ],
    '5': [
      72, 504, 1032, 1320, 1544, 2088, 2216, 2664, 4008, 4392, 5352, 6712, 8760,
      13536, 17568, 19848, 26416, 35160,
    ],
    '6': [
      328, 600, 1224, 1544, 1864, 2472, 2600, 3112, 4776, 5160, 6200, 7736,
      10296, 15264, 20616, 22920, 30576, 40576,
    ],
    '7': [
      104, 712, 1480, 1800, 2216, 2984, 3112, 3624, 5544, 6200, 7224, 9144,
      12216, 18336, 24496, 27376, 36696, 48936,
    ],
    '8': [
      120, 808, 1672, 2088, 2536, 3368, 3496, 4264, 6200, 6968, 8504, 10680,
      14112, 21384, 28336, 31704, 42368, 57336,
    ],
    '9': [
      136, 936, 1864, 2344, 2856, 3752, 4008, 4776, 6968, 7992, 9528, 11832,
      15840, 23688, 31704, 35160, 46888, 63776,
    ],
    '10': [
      144, 1032, 2088, 2664, 3112, 4264, 4392, 5352, 7992, 8760, 10680, 12960,
      17568, 25456, 35160, 39232, 52752, 71112,
    ],
    '11': [
      176, 1192, 2408, 2984, 3624, 4776, 4968, 5992, 9144, 9912, 12216, 15264,
      19848, 30576, 39232, 45352, 59256, 78704,
    ],
    '12': [
      208, 1352, 2728, 3368, 4136, 5544, 5736, 6712, 10296, 11448, 13536, 16992,
      22920, 34008, 45352, 51024, 68808, 90816,
    ],
    '13': [
      224, 1544, 3112, 3880, 4584, 6200, 6456, 7736, 11448, 12960, 15264, 19080,
      25456, 37888, 51024, 57336, 76208, 101840,
    ],
    '14': [
      256, 1736, 3496, 4264, 5160, 6968, 7224, 8504, 12960, 14112, 16992, 21384,
      28336, 42368, 57336, 63776, 84760, 115040,
    ],
    '15': [
      280, 1800, 3624, 4584, 5544, 7224, 7736, 9144, 13536, 15264, 18336, 22920,
      30576, 45352, 61664, 68808, 90816, 124464,
    ],
    '16': [
      328, 1928, 3880, 4968, 5992, 7736, 7992, 9912, 14688, 16416, 19848, 24496,
      32856, 48936, 66592, 73712, 97896, 133208,
    ],
    '17': [
      336, 2152, 4392, 5352, 6456, 8760, 9144, 10680, 16416, 18336, 21384,
      27376, 36696, 55056, 73712, 81176, 110136, 146856,
    ],
    '18': [
      376, 2344, 4776, 5992, 7224, 9528, 9912, 11832, 17568, 19848, 23688,
      29296, 39232, 59256, 78704, 87936, 119816, 157432,
    ],
    '19': [
      408, 2600, 5160, 6456, 7736, 10296, 10680, 12960, 19080, 21384, 25456,
      32856, 43816, 66592, 87936, 97896, 133208, 175600,
    ],
    '20': [
      440, 2792, 5544, 6968, 8248, 11064, 11448, 14112, 20616, 22920, 28336,
      35160, 46888, 71112, 93800, 105528, 142248, 187712,
    ],
    '21': [
      488, 2984, 5992, 7480, 9144, 12216, 12576, 15264, 22920, 25456, 30576,
      37888, 51024, 76208, 101840, 115040, 152976, 203704,
    ],
    '22': [
      520, 3240, 6456, 7992, 9528, 12960, 13536, 16416, 24496, 27376, 32856,
      40576, 55056, 81176, 110136, 119816, 165216, 220296,
    ],
    '23': [
      552, 3496, 6968, 8504, 10296, 13536, 14112, 16992, 25456, 28336, 34008,
      43816, 57336, 87936, 115040, 133208, 171888, 230104,
    ],
    '24': [
      584, 3624, 7224, 9144, 11064, 14688, 15264, 18336, 27376, 30576, 36696,
      45352, 61664, 90816, 124464, 137792, 185728, 245648,
    ],
    '25': [
      616, 3752, 7480, 9528, 11448, 15264, 15840, 19080, 28336, 31704, 37888,
      46888, 63776, 93800, 128496, 142248, 191720, 254328,
    ],
    '26': [
      712, 4392, 8760, 11064, 13536, 17568, 18336, 22152, 32856, 36696, 43816,
      55056, 75376, 110136, 149776, 165216, 226416, 299856,
    ],
    '26A': [
      632, 3880, 7736, 9912, 11832, 15840, 16416, 19848, 29296, 32856, 39232,
      48936, 66592, 97896, 133208, 146856, 199824, 266440,
    ],
    '27': [
      648, 4008, 7992, 9912, 11832, 15840, 16416, 19848, 29296, 32856, 39232,
      48936, 66592, 97896, 133208, 146856, 199824, 266440,
    ],
    '28': [
      680, 4264, 8504, 10680, 12576, 16992, 17568, 21384, 31704, 35160, 42368,
      52752, 71112, 105528, 142248, 157432, 214176, 284608,
    ],
    '29': [
      712, 4392, 8760, 11064, 13536, 17568, 18336, 22152, 34008, 36696, 45352,
      55056, 73712, 110136, 146856, 165216, 221680, 293736,
    ],
    '30': [
      776, 4776, 9528, 11832, 14112, 19080, 19848, 23688, 35160, 39232, 46888,
      59256, 78704, 119816, 157432, 177816, 236160, 314888,
    ],
    '31': [
      808, 4968, 9912, 12216, 14688, 19848, 20616, 24496, 36696, 40576, 48936,
      61664, 81176, 124464, 161760, 185728, 245648, 324336,
    ],
    '32': [
      840, 5160, 10296, 12960, 15264, 20616, 21384, 25456, 37888, 42368, 51024,
      63776, 84760, 128496, 169544, 191720, 254328, 339112,
    ],
    '32A': [
      904, 5544, 11064, 14112, 16416, 22152, 22920, 27376, 42368, 46888, 55056,
      68808, 93800, 137792, 187712, 205880, 284608, 375448,
    ],
    '33': [
      968, 5992, 11832, 14688, 17568, 23688, 24496, 29296, 43816, 48936, 59256,
      75376, 97896, 149776, 195816, 226416, 293736, 391656,
    ],
    '33A': [
      840, 5160, 10296, 12960, 15840, 20616, 22152, 26416, 39232, 43816, 52752,
      66592, 87936, 133208, 175600, 199824, 266440, 351224,
    ],
    '33B': [
      968, 5992, 11832, 14688, 17568, 23688, 24496, 29296, 43816, 48936, 59256,
      75376, 100752, 149776, 201936, 226416, 301066, 403097,
    ],
    '34': [
      1032, 6200, 12576, 15840, 19080, 25456, 26416, 31704, 46888, 52752, 63776,
      78704, 105528, 157432, 211936, 236160, 314888, 422232,
    ],
    '34A': [
      1064, 6456, 12576, 15840, 19080, 25456, 26416, 31704, 46888, 52752, 63776,
      78704, 105528, 157432, 211936, 236160, 314888, 422232,
    ],
    '35': [
      1096, 6712, 12960, 16416, 19848, 26416, 27376, 32856, 48936, 55056, 66592,
      81176, 110136, 161760, 220296, 245648, 324336, 440616,
    ],
    '36': [
      1160, 6968, 13536, 16992, 20616, 27376, 28336, 34008, 51024, 57336, 68808,
      84760, 115040, 169544, 230104, 254328, 339112, 460232,
    ],
    '37A': [
      1192, 7224, 14112, 18336, 21384, 28336, 30576, 36696, 55056, 59256, 71112,
      90816, 119816, 181656, 239656, 275376, 363336, 478400,
    ],
    '37': [
      1224, 7480, 14688, 18336, 22152, 29296, 30576, 36696, 55056, 61664, 75376,
      93800, 125808, 187712, 251640, 284608, 375938, 503343,
    ],
  };

  // 1, 6, 12, 15, 18, 24, 25, 30, 45, 50, 60, 75, 100, 150, 200, 225, 300, 400
  const rbIndexes = [
    1, 6, 12, 15, 18, 24, 25, 30, 45, 50, 60, 75, 100, 150, 200, 225, 300, 400,
  ];

  export function findClosestRbIndex(element: number, lower: boolean) {
    const arr = rbIndexes;
    let i = 0;

    while (arr[i] <= element && i < arr.length) i++;

    const result = lower ? i - 1 : i;

    return Math.min(arr.length - 1, Math.max(result, 0));
  }

  export function linearInterpolation(
    x: number,
    x0: number,
    y0: number,
    x1: number,
    y1: number,
  ) {
    const m = (y1 - y0) / (x1 - x0);
    const q = y0 - m * x0;

    return x * m + q;
  }

  export function getTbs(tbsIndex: TbsIndex, rb: number) {
    const tbsIndexArr = tbsTable[tbsIndex];

    if (rb < 1) {
      return 0;
    }

    if (rbIndexes.includes(rb)) {
      return tbsIndexArr[rbIndexes.indexOf(rb)];
    }

    const lower = findClosestRbIndex(rb, true);
    const upper = findClosestRbIndex(rb, false);
    console.log('rb ' + rb + ' lower = ' + lower + ' upper = ' + upper);

    if (lower == upper) {
      // no interpolation possible
      return (tbsIndexArr[lower] * rb) / rbIndexes[lower];
    }

    return Math.floor(
      linearInterpolation(
        rb,
        rbIndexes[lower],
        tbsIndexArr[lower],
        rbIndexes[upper],
        tbsIndexArr[upper],
      ),
    );
  }
}
